<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>IDECodeSnippetCompletionPrefix</key>
	<string></string>
	<key>IDECodeSnippetCompletionScopes</key>
	<array>
		<string>All</string>
	</array>
	<key>IDECodeSnippetContents</key>
	<string>// MARK: 最简单的 Alert：主/副标题 + 取消_确定@按钮行为监听 + 中间弹出 + 点击空白区域不可取消
private lazy var simpleAlert: UIAlertController = {
    UIAlertController
        .makeAlert("提示", "这是一条简单提示")
        .byAddCancel { [weak self] _ in
            guard let self else { return }
            print("Cancel")
            // TODO: 这里写你的取消逻辑
        }
        .byAddOK { [weak self] _ in
            guard let self else { return }
            print("OK")
            // TODO: 这里写你的确认逻辑
        }
}()
// MARK: 最简单的 Alert：主/副标题 + 取消_确定@按钮行为监听 + 中间弹出 + 点击空白区域不可取消
private lazy var simpleAlert: UIAlertController = {
    UIAlertController
        .makeAlert("重命名", "请输入新的名称")
//        .bySDBgImageView("https://picsum.photos/800/600",
//                         image: "唐老鸭".img,
//                         hideSystemBackdrop: true)
//        .byKFBgImageView("https://picsum.photos/800/600",
//                         image: "唐老鸭".img,
//                         hideSystemBackdrop: true)
        .byBgImage("唐老鸭".img)                      // 本地图背景（同步阶段，无动画）
        .byCardBorder(width: 1, color: .systemBlue)   // 外层卡片描边
        .byAddTextField(placeholder: "新名称",
                        borderWidth: nil,             // ← 不给 tf 自身描边
                        borderColor: nil,
                        cornerRadius: 8) { alert, tf, input, oldText, isDeleting in
            let ok = alert.actions.first { $0.title == "确定" }
            ok?.isEnabled = !(tf.text ?? "").trimmingCharacters(in: .whitespacesAndNewlines).isEmpty
        }
        .byTextFieldOuterBorder(at: 0, width: 1, color: .systemBlue, cornerRadius: 10, insets: .init(top: 6, left: 12, bottom: 6, right: 12)) // ← 给灰色容器描边
        .byAddCancel { _ in                          // ✅ 一个回调（只给 action）
            print("Cancel tapped")
        }
        .byAddOK{ alert, _ in                 // 需要 alert + action 的回调
            let name = alert.textField(at: 0)?.text ?? ""
            print("new name =", name)
        }
        .byTintColor(.systemBlue)
        .byPresent(self)
}()
// MARK: 主标题 + 相机_相册_取消@按钮行为监听 + 屏幕底部弹出 + 点击空白区域可取消
private lazy var simpleAlert: UIAlertController = {
    UIAlertController
        .makeActionSheet("选择来源", nil)
        .byAddAction(title: "相机") { _ in
            print("camera")
        }
        .byAddAction(title: "相册") { _ in
            print("photos")
        }
        .byAddCancel { _ in
            print("Cancel tapped")
        }
        .byPresent(self)
}()
// MARK: 主标题 + 删除_取消@按钮行为监听 + 从按钮自身位置（锚点）弹出 + 点击空白区域可取消
private lazy var simpleAlert: UIAlertController = {
    UIAlertController
        .makeActionSheet("操作", nil)
        .byAddDestructive("删除") { _ in
            print("delete")
        }
        .byAddCancel { _ in
            print("Cancel tapped")
        }
        .byPresent(self, anchor: .view(sender, sender.bounds)) // 指定锚点
}()</string>
	<key>IDECodeSnippetIdentifier</key>
	<string>50109609-C2F7-4D66-AA1E-ABF7A0741D49</string>
	<key>IDECodeSnippetLanguage</key>
	<string>Xcode.SourceCodeLanguage.Swift</string>
	<key>IDECodeSnippetSummary</key>
	<string></string>
	<key>IDECodeSnippetTitle</key>
	<string>Swift@UIAlertController</string>
	<key>IDECodeSnippetUserSnippet</key>
	<true/>
	<key>IDECodeSnippetVersion</key>
	<integer>2</integer>
</dict>
</plist>
