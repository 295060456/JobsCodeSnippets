<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>IDECodeSnippetCompletionPrefix</key>
	<string></string>
	<key>IDECodeSnippetCompletionScopes</key>
	<array>
		<string>All</string>
	</array>
	<key>IDECodeSnippetContents</key>
	<string>-(UIButton *)countDownBtn{
    if (!_countDownBtn) {
        @jobs_weakify(self)
        _countDownBtn = UIButton.initByConfig(jobsMakeButtonTimerConfigModel(^(__kindof ButtonTimerConfigModel * _Nullable data) {
            /// 一些通用的设置
            data.count = 50;
            data.showTimeType = ShowTimeType_SS;// 时间显示风格
            data.countDownBtnType = TimerStyle_anticlockwise;// 时间方向
            data.cequenceForShowTitleRuningStrType = CequenceForShowTitleRuningStrType_tail;//
            data.labelShowingType = UILabelShowingType_01;//【换行模式】
            /// 计时器未开始【静态值】
            data.readyPlayValue = jobsMakeButtonTimerProcessValueModel(^(ButtonTimerProcessValueModel * _Nullable model) {
                model.layerBorderWidth = 1;
                model.layerCornerRadius = JobsWidth(18);
                model.bgCor = JobsClearColor;
                model.layerBorderCor = JobsClearColor;
                model.textCor = HEXCOLOR_ALPHA(0xAE8330, 1);
                model.text = Title9;
                model.font = UIFontWeightMediumSize(JobsWidth(14));
            });
            /// 计时器进行中【动态值】
            data.runningValue = jobsMakeButtonTimerProcessValueModel(^(ButtonTimerProcessValueModel * _Nullable model) {
                model.bgCor = JobsClearColor;
                model.text = JobsInternationalization(Title12);
                model.layerBorderCor = JobsClearColor;
                model.textCor = HEXCOLOR_ALPHA(0xAE8330, 1);
                model.font = UIFontWeightMediumSize(JobsWidth(14));
            });
            /// 计时器结束【静态值】
            data.endValue = jobsMakeButtonTimerProcessValueModel(^(ButtonTimerProcessValueModel * _Nullable model) {
                model.bgCor = JobsClearColor;
            });
        })).onClick(^(__kindof UIButton *x){
            @jobs_strongify(self)
            x.startTimer();//选择时机、触发启动
            if (self.objectBlock) self.objectBlock(x);
        }).onLongPressGesture(^(id data){
            NSLog(@"");
        }).heartBeat(^(id _Nullable data){
            if ([data isKindOfClass:TimerProcessModel.class]) {
                TimerProcessModel *model = (TimerProcessModel *)data;
                NSLog(@"❤️❤️❤️❤️❤️%f",model.data.anticlockwiseTime);
            }
        });
        [self addSubview:_countDownBtn];
        [_countDownBtn mas_makeConstraints:^(MASConstraintMaker *make) {
            make.right.equalTo(self).offset(-JobsWidth(120));
            make.top.equalTo(self).offset(JobsWidth(8));
            make.bottom.equalTo(self).offset(-JobsWidth(8));
            make.width.mas_equalTo(JobsWidth(80));
        }];
    }return _countDownBtn;
}</string>
	<key>IDECodeSnippetIdentifier</key>
	<string>4E499BB6-CACE-472F-90F6-81C5000B4FD4</string>
	<key>IDECodeSnippetLanguage</key>
	<string>Xcode.SourceCodeLanguage.Objective-C</string>
	<key>IDECodeSnippetSummary</key>
	<string></string>
	<key>IDECodeSnippetTitle</key>
	<string>倒计时按钮</string>
	<key>IDECodeSnippetUserSnippet</key>
	<true/>
	<key>IDECodeSnippetVersion</key>
	<integer>2</integer>
</dict>
</plist>
