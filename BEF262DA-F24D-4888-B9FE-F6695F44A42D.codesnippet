<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>IDECodeSnippetCompletionPrefix</key>
	<string>Jobs@TF</string>
	<key>IDECodeSnippetCompletionScopes</key>
	<array>
		<string>All</string>
	</array>
	<key>IDECodeSnippetContents</key>
	<string>/// 密码输入框
private lazy var tf1: UITextField = {
    UITextField()
        .byDelegate(self) // 数据源
        .byPlaceholder("请输入密码（6-20 位）")
        .bySecureTextEntry(true)
        .byInputAccessoryView(UIToolbar().byItems([
            UIBarButtonItem()
                .byTitle("清空")
                .byTitleFont(.systemFont(ofSize: 15))
                .byTitleColor(.systemRed)
                .byStyle(.plain)
                .onTap { [weak self] _ in
                    guard let self = self else { return }   // ✅ 确保生命周期安全
                    /// TODO
                },
            UIBarButtonItem(systemItem: .flexibleSpace),
            UIBarButtonItem()
                .byTitle("完成")
                .byTitleFont(.systemFont(ofSize: 15))
                .byTitleColor(.systemYellow)
                .byStyle(.done)
                .onTap { [weak self] _ in
                    guard let self = self else { return }   // ✅ 确保生命周期安全
                    view.endEditing(true)
                },
        ])
        .bySizeToFit())                                     // ✅ 给密码框自定义 inputAccessoryView
        .byBorderStyle(.roundedRect)
        .byReturnKeyType(.done)
        .byTextContentType(.password)
        .byPasswordRules(nil) // 也可自定义
    //            .byLeftView(Self.makeIcon("lock"), mode: .always)
        .byLeftIcon(UIImage(systemName: "lock"),
                    tint: .secondaryLabel,
                    size: .init(width: 18, height: 18),
                    leading: 12, spacing: 8)
        .byRightView(UIButton(type: .system)
                     // 普通文字：未选中状态标题
                     .byTitle("显示", for: .normal)
                     // 选中状态标题
                     .byTitle("隐藏", for: .selected)
                     // 文字颜色：区分状态
                     .byTitleColor(.systemBlue, for: .normal)
                     .byTitleColor(.systemRed, for: .selected)
                     // 字体统一
                     .byTitleFont(.systemFont(ofSize: 16, weight: .medium))
                     // 图标（SF Symbol）
                     .byImage(UIImage(systemName: "eye.slash"), for: .normal)   // 未选中图标
                     .byImage(UIImage(systemName: "eye"), for: .selected)       // 选中图标
                     // 图文内边距
                     .byContentEdgeInsets(UIEdgeInsets(top: 4, left: 8, bottom: 4, right: 8))
                     // 图标与文字间距
                     .byTitleEdgeInsets(UIEdgeInsets(top: 0, left: 6, bottom: 0, right: -6))
                     // 点按事件（统一入口）
                     .onTap { [weak self] sender in
                         guard let self else { return }
                         sender.isSelected.toggle()
                         // 文字与图标自动切换
                         self.passwordTF.isSecureTextEntry.toggle()
                         self.passwordTF.togglePasswordVisibility()
                         print("👁 当前状态：\(sender.isSelected ? "隐藏密码" : "显示密码")")
                     }, mode: .always)
        .byInputView(datePicker) // 演示自定义 inputView：点密码框弹日期（纯展示，不建议真实项目这么用）
        .byLimitLength(5)
        .byAddTo(view) { [unowned self] make in
            make.top.equalTo(textField.snp.bottom).offset(12)
            make.centerX.equalToSuperview()
            make.height.equalTo(36)
        }
}()
///邮箱输入框
private lazy var tf1: UITextField = {
    UITextField()
        // 数据源
        .byDelegate(self)
        // 基础视觉
        .byPlaceholder("请输入邮箱（至少 3 个字符）")
        .byTextColor(.label)
        .byFont(.systemFont(ofSize: 16))
        .byTextAlignment(.natural)
        .byBorderStyle(.roundedRect)
        .byClearButtonMode(.whileEditing)

        .byInputAccessoryView(accessory)
        // 键盘
        .byKeyboardType(.emailAddress)
        .byKeyboardAppearance(.dark)
        .byReturnKeyType(.next)
        .byEnablesReturnKeyAutomatically(true)
        // 智能输入
        .byAutocapitalizationType(.none)
        .byAutocorrectionType(.no)
        .bySpellCheckingType(.no)
        .bySmartQuotesType(.no)
        .bySmartDashesType(.no)
        .bySmartInsertDeleteType(.no)
        // 内容类型
        .byTextContentType(.emailAddress)
        // 编辑属性
        .byAllowsEditingTextAttributes(true)
        .byDefaultTextAttributes([.kern: 0.5]) // 字距
        .byTypingAttributes([.foregroundColor: UIColor.label])
        // 左/右视图
        //.byLeftView(makeIcon("envelope"), mode: .always)
        .byLeftIcon(UIImage(systemName: "envelope"),
                    tint: .secondaryLabel,
                    size: .init(width: 18, height: 18),
                    leading: 12, spacing: 8)
        .byAddTo(view) { [unowned self] make in
            make.top.equalTo(textField.snp.bottom).offset(12)
            make.centerX.equalToSuperview()
            make.height.equalTo(36)
        }
}()

// iOS 17+
if #available(iOS 17.0, *) {
    tf.byInlinePredictionType(.default)
}
// iOS 18+（演示：即使邮箱框也能设置，不影响）
if #available(iOS 18.0, *) {
    tf.byMathExpressionCompletionType(.default)
      .byWritingToolsBehavior(.default)
      .byAllowedWritingToolsResultOptions([])
}</string>
	<key>IDECodeSnippetIdentifier</key>
	<string>BEF262DA-F24D-4888-B9FE-F6695F44A42D</string>
	<key>IDECodeSnippetLanguage</key>
	<string>Xcode.SourceCodeLanguage.Swift</string>
	<key>IDECodeSnippetSummary</key>
	<string></string>
	<key>IDECodeSnippetTitle</key>
	<string>Swift@输入框</string>
	<key>IDECodeSnippetUserSnippet</key>
	<true/>
	<key>IDECodeSnippetVersion</key>
	<integer>2</integer>
</dict>
</plist>
