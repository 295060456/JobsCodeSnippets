<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>IDECodeSnippetCompletionPrefix</key>
	<string>Jobs@UICollectionView</string>
	<key>IDECodeSnippetCompletionScopes</key>
	<array>
		<string>All</string>
	</array>
	<key>IDECodeSnippetContents</key>
	<string>private lazy var flowLayout: UICollectionViewFlowLayout = {
    UICollectionViewFlowLayout()
        .byScrollDirection(.vertical)
        .byMinimumLineSpacing(10)
        .byMinimumInteritemSpacing(10)
        .bySectionInset(UIEdgeInsets(top: 10, left: 12, bottom: 10, right: 12))
}()

private lazy var collectionView: UICollectionView = {
    UICollectionView(frame: .zero, collectionViewLayout: flowLayout)
        .byDataSource(self)
        .byDelegate(self)
        .registerCell(UICollectionViewCell.self)
        .byBackgroundView(nil)
        .byDragInteractionEnabled(false)

        // 空态按钮（与 UITableView Demo 一致）
        .jobs_emptyButtonProvider { [unowned self] in
            UIButton.sys()
                .byTitle("暂无数据", for: .normal)
                .bySubTitle("点我填充示例数据", for: .normal)
                .byImage(UIImage(systemName: "square.grid.2x2"), for: .normal)
                .byImagePlacement(.top)
                .onTap { [weak self] _ in
                    guard let self else { return }
                    self.items = (1...12).map { "Item \($0)" }
                    self.collectionView.byReloadData()        // ✅ reload 后自动评估空态
                }
                // 可选：自定义空态按钮布局
                .jobs_setEmptyLayout { btn, make, host in
                    make.centerX.equalTo(host)
                    make.centerY.equalTo(host).offset(-40)
                    make.leading.greaterThanOrEqualTo(host).offset(16)
                    make.trailing.lessThanOrEqualTo(host).inset(16)
                    make.width.lessThanOrEqualTo(host).multipliedBy(0.9)
                }
        }

        // 下拉刷新（JobsHeaderAnimator）
        .pullDownWithJobsAnimator({ [weak self] in
            guard let self = self, !self.isPullRefreshing else { return }
            self.isPullRefreshing = true
            print("⬇️ 下拉刷新触发")

            DispatchQueue.main.asyncAfter(deadline: .now() + 1.0) {
                if self.items.isEmpty {
                    self.items = (1...12).map { "Item \($0)" }
                } else {
                    self.items.shuffle()
                }
                self.isPullRefreshing = false
                self.collectionView.byReloadData()
                self.collectionView.pullDownStop()
                self.updateFooterAvailability()
                self.collectionView.jobs_reloadEmptyViewAuto()
                print("✅ 下拉刷新完成")
            }
        }, config: { animator in
            animator
                .byIdleDescription("Jobs@下拉刷新")
                .byReleaseToRefreshDescription("Jobs@松开立即刷新")
                .byLoadingDescription("Jobs@正在刷新中…")
                .byNoMoreDataDescription("Jobs@已经是最新数据")
        })

        // 上拉加载（JobsFooterAnimator）
        .pullUpWithJobsAnimator({ [weak self] in
            guard let self = self, !self.isLoadingMore else { return }
            self.isLoadingMore = true
            print("⬆️ 上拉加载触发")

            DispatchQueue.main.asyncAfter(deadline: .now() + 1.0) {
                let base = self.items.count
                self.items += (1...8).map { "Item \(base + $0)" }

                self.isLoadingMore = false
                self.collectionView.byReloadData()
                self.collectionView.pullUpStop()
                self.updateFooterAvailability()
                self.collectionView.jobs_reloadEmptyViewAuto()
                print("✅ 上拉加载完成")
            }
        }, config: { animator in
            animator
                .byIdleDescription("Jobs@上拉加载更多")
                .byReleaseToRefreshDescription("Jobs@松开立即加载")
                .byLoadingMoreDescription("Jobs@加载中…")
                .byNoMoreDataDescription("Jobs@没有更多数据")
        })

        .byAddTo(view) { [unowned self] make in
            if view.jobs_hasVisibleTopBar() {
                make.top.equalTo(self.gk_navigationBar.snp.bottom).offset(10)
                make.left.right.bottom.equalToSuperview()
            } else {
                make.edges.equalToSuperview()
            }
        }
}()

// ============================== UICollectionViewDataSource ==============================
func numberOfSections(in collectionView: UICollectionView) -&gt; Int { 1 }

func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -&gt; Int {
    items.count
}

func collectionView(_ collectionView: UICollectionView,
                    cellForItemAt indexPath: IndexPath) -&gt; UICollectionViewCell {
    let cell: UICollectionViewCell = collectionView.dequeueCell(UICollectionViewCell.self, for: indexPath)
    let label: UILabel
    if let exist = cell.contentView.viewWithTag(1001) as? UILabel {
        label = exist
    } else {
        label = UILabel()
            .byNumberOfLines(1)
            .byTextAlignment(.center)
            .byFont(.systemFont(ofSize: 16, weight: .medium))
            .byTextColor(.label)
            .byTag(1001)
            .byAddTo(cell.contentView) { make in     // ✅ 加到 contentView
                make.edges.equalToSuperview().inset(8)
            }

        // 背景 &amp; 圆角（只需设一次）
        cell.contentView.byBgColor(.secondarySystemBackground)
            .byCornerRadius(10)
            .byMasksToBounds(true)
    }

    label.text = items[indexPath.item]
    return cell
}
// ============================== UICollectionViewDelegate ==============================
func collectionView(_ collectionView: UICollectionView, didSelectItemAt indexPath: IndexPath) {
    print("✅ didSelect Item: \(indexPath.item)")
    collectionView.deselectItem(at: indexPath, animated: true)
}

// ============================== UICollectionViewDelegateFlowLayout ==============================
func collectionView(_ collectionView: UICollectionView,
                    layout collectionViewLayout: UICollectionViewLayout,
                    sizeForItemAt indexPath: IndexPath) -&gt; CGSize {
    // 计算 2 列卡片宽度（考虑 sectionInset / interItemSpacing）
    guard let layout = collectionViewLayout as? UICollectionViewFlowLayout else {
        return CGSize(width: 100, height: 60)
    }
    let inset = layout.sectionInset
    let spacing = layout.minimumInteritemSpacing
    let columns: CGFloat = 2
    let totalH = inset.left + inset.right + (columns - 1) * spacing
    let w = floor((collectionView.bounds.width - totalH) / columns)
    return CGSize(width: w, height: 64)
}</string>
	<key>IDECodeSnippetIdentifier</key>
	<string>44743799-8160-44B4-8483-768B40B72C00</string>
	<key>IDECodeSnippetLanguage</key>
	<string>Xcode.SourceCodeLanguage.Swift</string>
	<key>IDECodeSnippetSummary</key>
	<string>UICollectionView</string>
	<key>IDECodeSnippetTitle</key>
	<string>Swift@UICollectionView</string>
	<key>IDECodeSnippetUserSnippet</key>
	<true/>
	<key>IDECodeSnippetVersion</key>
	<integer>2</integer>
</dict>
</plist>
