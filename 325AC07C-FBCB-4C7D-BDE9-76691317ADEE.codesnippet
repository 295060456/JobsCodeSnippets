<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>IDECodeSnippetCompletionPrefix</key>
	<string>Jobs@UICollectionView</string>
	<key>IDECodeSnippetCompletionScopes</key>
	<array>
		<string>All</string>
	</array>
	<key>IDECodeSnippetContents</key>
	<string>
&lt;
UICollectionViewDataSource
,UICollectionViewDelegate
,UICollectionViewDelegateFlowLayout
&gt;

/// UI
Prop_strong()UICollectionViewFlowLayout *layout;
Prop_strong()BaseCollectionView *collectionView;
/// Data
Prop_copy()NSMutableArray &lt;UIViewModel *&gt;*dataMutArr;

#pragma mark —— 一些私有方法
-(void)layoutSubviews{
    [super layoutSubviews];
    JobsLock(self.size = [MSHomePopupView viewSizeWithModel:nil];)
    /// 内部指定圆切角
    [self appointCornerCutToCircleByRoundingCorners:UIRectCornerTopLeft | UIRectCornerTopRight
                                        cornerRadii:CGSizeMake(JobsWidth(8), JobsWidth(8))];
}

-(UICollectionViewFlowLayout *)makeLayout{
    self.verticalLayout.itemSize = CGSizeMake(100, 100);  // 设置单元格尺寸
    self.verticalLayout.minimumLineSpacing = 10;  // 设置行间距
    self.verticalLayout.minimumInteritemSpacing = 10;  // 设置单元格之间的间距
    self.verticalLayout.sectionInset = UIEdgeInsetsMake(20, 20, 20, 20);  // 设置 section 的内边距
    return self.verticalLayout;
}
#pragma mark —— UICollectionViewCell 部署策略
//见 @interface NSObject (JobsDeployCellConfig)
#pragma mark —— UICollectionViewDataSource
- (NSInteger)numberOfSectionsInCollectionView:(UICollectionView *)collectionView {
    return 1;
}

- (nonnull __kindof UICollectionViewCell *)collectionView:(nonnull UICollectionView *)collectionView
                                   cellForItemAtIndexPath:(nonnull NSIndexPath *)indexPath {
    @jobs_weakify(self)
    return [self planAtIndexPath:indexPath
                          block1:^{
        @jobs_strongify(self)
        BaiShaETProjCountdownCVCell *cell = [BaiShaETProjCountdownCVCell cellWithCollectionView:collectionView forIndexPath:indexPath];
        cell.JobsRichViewByModel2(self.dataMutArr[indexPath.section])
            .JobsBlock1(^(id _Nullable data) {
             
            });
        return cell;
    }block2:^{
        @jobs_strongify(self)
        BaiShaETProjOrderDetailsCVCell *cell = [BaiShaETProjOrderDetailsCVCell cellWithCollectionView:collectionView forIndexPath:indexPath];
        cell.JobsRichViewByModel2(self.dataMutArr[indexPath.section])
            .JobsBlock1(^(id _Nullable data) {
             
            });
        return cell;
    }block3:^{
        ReturnBaseCollectionViewCell;
    }block4:^{
        ReturnBaseCollectionViewCell;
    }block5:^id{
        ReturnBaseCollectionViewCell;
    }];
}

- (NSInteger)collectionView:(nonnull UICollectionView *)collectionView
     numberOfItemsInSection:(NSInteger)section {
    return self.dataMutArr.count;
}

- (UICollectionReusableView *)collectionView:(UICollectionView *)collectionView
           viewForSupplementaryElementOfKind:(NSString *)kind
                                 atIndexPath:(NSIndexPath *)indexPath {
    if (kind.isEqualToString(UICollectionElementKindSectionFooter)) {
        if (indexPath.section == self.cvcellMutArr.count - 1) {
            return [collectionView UICollectionElementKindSectionFooterClass:BaiShaETProjVIPSubCVFooterView.class
                                                                forIndexPath:indexPath].JobsRichViewByModel2(jobsMakeViewModel(^(__kindof UIViewModel * _Nullable viewModel) {
                viewModel.textModel.text = JobsInternationalization(@"查看VIP規則");
            }));
        }else ReturnBaseCollectionReusableHeaderView
    }else{
        return [collectionView UICollectionElementKindSectionHeaderClass:BaseCollectionReusableView.class
                                                            forIndexPath:indexPath].JobsRichViewByModel2(jobsMakeViewModel(^(__kindof UIViewModel * _Nullable viewModel) {
        }));;
    }
}
#pragma mark —— UICollectionViewDelegate
/// 允许选中时，高亮
-(BOOL)collectionView:(UICollectionView *)collectionView
shouldHighlightItemAtIndexPath:(NSIndexPath *)indexPath {
    NSLog(@"%s", __FUNCTION__);
    return YES;
}
/// 高亮完成后回调
-(void)collectionView:(UICollectionView *)collectionView
didHighlightItemAtIndexPath:(NSIndexPath *)indexPath {
    NSLog(@"%s", __FUNCTION__);
}
/// 由高亮转成非高亮完成时的回调
-(void)collectionView:(UICollectionView *)collectionView
didUnhighlightItemAtIndexPath:(NSIndexPath *)indexPath {
    NSLog(@"%s", __FUNCTION__);
}
/// 设置是否允许选中
-(BOOL)collectionView:(UICollectionView *)collectionView
shouldSelectItemAtIndexPath:(NSIndexPath *)indexPath {
    NSLog(@"%s", __FUNCTION__);
    return YES;
}
/// 设置是否允许取消选中
-(BOOL)collectionView:(UICollectionView *)collectionView
shouldDeselectItemAtIndexPath:(NSIndexPath *)indexPath {
    NSLog(@"%s", __FUNCTION__);
    return YES;
}
/// 选中操作
- (void)collectionView:(UICollectionView *)collectionView
didSelectItemAtIndexPath:(NSIndexPath *)indexPath {
    NSLog(@"%s", __FUNCTION__);
    /**
     滚动到指定位置
     _collectionView.contentOffset = CGPointMake(0,-100);
     [_collectionView setContentOffset:CGPointMake(0, -200) animated:YES];// 只有在viewDidAppear周期 或者 手动触发才有效
     */
}
/// 取消选中操作
-(void)collectionView:(UICollectionView *)collectionView
didDeselectItemAtIndexPath:(NSIndexPath *)indexPath {
    NSLog(@"%s", __FUNCTION__);
}
#pragma mark —— UICollectionViewDelegateFlowLayout
/// header 大小
- (CGSize)collectionView:(UICollectionView *)collectionView
                  layout:(UICollectionViewLayout *)collectionViewLayout
referenceSizeForHeaderInSection:(NSInteger)section {
    return [UBLSearchCollectionReusableView collectionReusableViewSizeWithModel:nil];
}
/// Footer 大小
- (CGSize)collectionView:(UICollectionView *)collectionView
                  layout:(UICollectionViewLayout*)collectionViewLayout
referenceSizeForFooterInSection:(NSInteger)section{
    return [CasinoAgencyRecommendTipsCRView collectionReusableViewSizeWithModel:nil];
}

- (CGSize)collectionView:(UICollectionView *)collectionView
                  layout:(UICollectionViewLayout *)collectionViewLayout
  sizeForItemAtIndexPath:(NSIndexPath *)indexPath {
    return [self planSizeAtIndexPath:indexPath
                              block1:^CGSize{
        return [BaiShaETProjCountdownCVCell cellSizeWithModel:nil];
    } block2:^CGSize{
        return [BaiShaETProjOrderDetailsCVCell cellSizeWithModel:self.dataMutArr[indexPath.section]];
    } block3:^CGSize{
        return CGSizeZero;
    } block4:^CGSize{
        return CGSizeZero;
    } block5:^CGSize{
        return CGSizeZero;
    }];
}
/// 定义的是元素（垂直方向滚动的时候）垂直之间的间距 或者 是元素（水平方向滚动的时候）水平之间的间距
- (CGFloat)collectionView:(UICollectionView *)collectionView
                   layout:(UICollectionViewLayout *)collectionViewLayout
minimumLineSpacingForSectionAtIndex:(NSInteger)section {
    return 12;
}
/// 定义的是UICollectionViewScrollDirectionVertical下，元素水平之间的间距。
/// UICollectionViewScrollDirectionHorizontal下，垂直和水平正好相反
/// Api自动计算一行的Cell个数，只有当间距小于此定义的最小值时才会换行，最小执行单元是Section（每个section里面的样式是统一的）
/// 定义的是元素（垂直方向滚动的时候）水平之间的间距 或者 是元素（水平方向滚动的时候）垂直之间的间距
- (CGFloat)collectionView:(UICollectionView *)collectionView
                   layout:(UICollectionViewLayout *)collectionViewLayout
minimumInteritemSpacingForSectionAtIndex:(NSInteger)section{
    return 0;
}
/// 内间距
-(UIEdgeInsets)collectionView:(UICollectionView *)collectionView
                       layout:(UICollectionViewLayout *)collectionViewLayout
       insetForSectionAtIndex:(NSInteger)section {
    return UIEdgeInsetsMake(0, 0, 0, 0);
}
#pragma mark —— lazyLoad
-(UICollectionViewFlowLayout *)layout{
    if (!_layout) {
        _layout = self.verticalLayout;
    }return _layout;
}
/// BaseViewProtocol
@synthesize collectionView = _collectionView;
-(BaseCollectionView *)collectionView{
    if (!_collectionView) {
        @jobs_weakify(self)
        _collectionView = self.addSubview(BaseCollectionView
                                          .initByLayout(self.horizontalLayout)
                                          .registerCollectionViewClass()
                                          .registerCollectionViewCellClass(JobsBtnStyleCVCell.class,@"")
                                          .registerCollectionElementKindSectionHeaderClass(BaseCollectionReusableView.class,@"")
                                          .registerCollectionElementKindSectionFooterClass(BaseCollectionReusableView.class,@"")
                                          .byEdgeInsets(UIEdgeInsetsMake(0, 0, 0, 0))
                                          /// 普通的MJRefreshHeader（触发事件）（二选一）
                                          .byMJRefreshHeader([MJRefreshNormalHeader headerWithRefreshingBlock:^{
                                              @jobs_strongify(self)
                                              /// TODO
                                              NSObject.feedbackGenerator(nil);/// 震动反馈
                                              self-&gt;_collectionView.endRefreshing(YES);
                                          }].byMJRefreshHeaderConfigModel(self.mjHeaderDefaultConfig))
                                          /// MJRefreshHeader的拓展：下拉刷新Lottie动画（二选一）
                                          .byMJRefreshHeader(self.lotAnimMJRefreshHeader.byRefreshConfigModel(jobsMakeRefreshConfigModel(^(__kindof MJRefreshConfigModel * _Nullable model) {
                                              
                                          })))
                                          /// 普通的MJRefreshFooter（触发事件）
                                          .byMJRefreshFooter([MJRefreshAutoNormalFooter footerWithRefreshingBlock:^{
                                              @jobs_strongify(self)
                                              /// TODO
                                              NSObject.feedbackGenerator(nil);/// 震动反馈
                                              self-&gt;_collectionView.endRefreshing(YES);
                                          }].byMJRefreshFooterConfigModel(self.mjFooterDefaultConfig))
                                          .byBounces(NO)///设置为NO，使得collectionView只能上拉，不能下拉
                                          .showsVerticalScrollIndicatorBy(NO)
                                          .showsHorizontalScrollIndicatorBy(NO)
                                          /// 无数据占位：用默认的图文占位表达（二选一）
                                          .emptyDataByButtonModel(jobsMakeButtonModel(^(__kindof UIButtonModel * _Nullable data) {
                                              data.title = JobsInternationalization(@"NO BANK CARD FOUND");
                                              data.titleCor = JobsWhiteColor;
                                              data.titleFont = bayonRegular(JobsWidth(30));
                                              data.normalImage = JobsIMG(@"用户默认头像");
                                          }))
                                          /// 无数据占位：用自定义的视图表达（二选一）
                                          .showEmptyViewBy(FMMaintenanceView
                                                           .BySize(FMMaintenanceView.viewSizeByModel(nil))
                                                           .JobsRichViewByModel2(nil)
                                                           .JobsBlock1(^(id  _Nullable data) {
                                                               
                                                           }))
                                          )
        .setMasonryBy(^(MASConstraintMaker *_Nonnull make){
            @jobs_strongify(self)
            make.centerX.equalTo(self);
            make.top.equalTo(self.jobsTextField.mas_bottom).offset(JobsWidth(5));
            make.size.mas_equalTo(CGSizeMake(JobsMainScreen_WIDTH() - JobsWidth(30), JobsWidth(72)));
        }).on().byBgCor(JobsClearColor).dataLink(self);
        
        _collectionView.setContentOffsetByYES(CGPointMake(0, 0));// 这句最快在 viewWillLayoutSubviews 有效
        
        {/// 水平刷新控件
            [_collectionView xzm_addNormalHeaderWithTarget:self
                                                    action:selectorBlocks(^id _Nullable(id _Nullable weakSelf,
                                                                                        id _Nullable arg) {
                NSLog(@"SSSS加载新的数据，参数: %@", arg);
                @jobs_strongify(self)
                /// 在需要结束刷新的时候调用（只能调用一次）
                /// _collectionView.endRefreshing();
                return nil;
            }, MethodName(self), self)];
            
            [_collectionView xzm_addNormalFooterWithTarget:self
                                                    action:selectorBlocks(^id _Nullable(id _Nullable weakSelf,
                                                                                        id _Nullable arg) {
                NSLog(@"SSSS加载新的数据，参数: %@", arg);
                @jobs_strongify(self)
                /// 在需要结束刷新的时候调用（只能调用一次）
                /// _collectionView.endRefreshing();
                return nil;
            }, MethodName(self), self)];
            // 隐藏时间
            _collectionView.xzm_header.updatedTimeHidden = YES;
            [_collectionView.xzm_header beginRefreshing];
        }
        
//        {
//            _collectionView.tabAnimated = [TABCollectionAnimated animatedWithCellClassArray:jobsMakeMutArr(^(__kindof NSMutableArray&lt;NSObject *&gt; * _Nullable arr) {
//                arr.add(DDCollectionViewCell_Style2.class)
//                .add(DDCollectionViewCell_Style3.class)
//                .add(DDCollectionViewCell_Style4.class);
//            })
//                                                                              cellSizeArray:jobsMakeMutArr(^(__kindof NSMutableArray&lt;NSObject *&gt; * _Nullable arr) {
//                arr.add(NSValue.bySize([DDCollectionViewCell_Style2 cellSizeWithModel:nil]))
//                    .add(NSValue.bySize([DDCollectionViewCell_Style3 cellSizeWithModel:nil]))
//                    .add(NSValue.bySize([DDCollectionViewCell_Style4 cellSizeWithModel:nil]))
//            })
//                                                                         animatedCountArray:@[@(1),@(1),@(1)]];
//            [_collectionView.tabAnimated addHeaderViewClass:BaseCollectionReusableView_Style1.class
//                                                   viewSize:[BaseCollectionReusableView_Style1 collectionReusableViewSizeWithModel:nil]
//                                                  toSection:0];
//            [_collectionView.tabAnimated addHeaderViewClass:BaseCollectionReusableView_Style1.class
//                                                   viewSize:[BaseCollectionReusableView_Style2 collectionReusableViewSizeWithModel:nil]
//                                                  toSection:2];
//
//            _collectionView.tabAnimated.containNestAnimation = YES;
//            _collectionView.tabAnimated.superAnimationType = TABViewSuperAnimationTypeShimmer;
//            _collectionView.tabAnimated.canLoadAgain = YES;
//            [_collectionView tab_startAnimation];   // 开启动画
//        }
//        {
//            _collectionView.tabAnimated = [TABCollectionAnimated animatedWithCellClass:HomeCVCell.class
//                                                                              cellSize:HomeCVCell.cellSizeByModel(nil)];
//            _collectionView.tabAnimated.superAnimationType = TABViewSuperAnimationTypeBinAnimation;
//            _collectionView.tabAnimated.canLoadAgain = YES;
//            _collectionView.tabAnimated.animatedBackViewCornerRadius = JobsWidth(8);
////            _collectionView.tabAnimated.animatedBackgroundColor = JobsRedColor;
//            [_collectionView tab_startAnimation];   // 开启动画
//        }
    }return _collectionView;
}

-(NSMutableArray&lt;UIViewModel *&gt; *)dataMutArr{
    if (!_dataMutArr) {
        _dataMutArr = jobsMakeMutArr(^(__kindof NSMutableArray &lt;UIViewModel *&gt;* _Nullable data) {
            
        });
    }return _dataMutArr;
}</string>
	<key>IDECodeSnippetIdentifier</key>
	<string>325AC07C-FBCB-4C7D-BDE9-76691317ADEE</string>
	<key>IDECodeSnippetLanguage</key>
	<string>Xcode.SourceCodeLanguage.Objective-C</string>
	<key>IDECodeSnippetPlatformFamily</key>
	<string>iphoneos</string>
	<key>IDECodeSnippetSummary</key>
	<string>创建UICollectionView的子类</string>
	<key>IDECodeSnippetTitle</key>
	<string>OC@UICollectionView</string>
	<key>IDECodeSnippetUserSnippet</key>
	<true/>
	<key>IDECodeSnippetVersion</key>
	<integer>2</integer>
</dict>
</plist>
